Extracting the relevant grammar and shortening the names

additive_operator:
| '+'
| '-'

argument_expression_list:
| '(' ( expression ( ',' expression )* ',' ? )? ')'

bitwise_post_expression:
| '&' unary_expression ( '&' unary_expression )*
| '^' unary_expression ( '^' unary_expression )*
| '|' unary_expression ( '|' unary_expression )*

component_or_swizzle_specifier:
| '.' member_ident component_or_swizzle_specifier ?
| '.' swizzle_name component_or_swizzle_specifier ?
| '[' expression ']' component_or_swizzle_specifier ?


expression:
| unary_expression bitwise_post_expression
| unary_expression relational_post_expression
| unary_expression relational_post_expression '&&' unary_expression relational_post_expression ( '&&' unary_expression relational_post_expression )*
| unary_expression relational_post_expression '||' unary_expression relational_post_expression ( '||' unary_expression relational_post_expression )*

literal:
| bool_literal
| float_literal
| int_literal

multiplicative_operator:
| '%'
| '*'
| '/'

optionally_typed_ident:
| ident ( ':' type_specifier )?


primary_expression:
| ident template_post_ident
| ident template_post_ident argument_expression_list
| literal
| '(' expression ')'


relational_post_expression:
| shift_post_expression
| shift_post_expression greater_than unary_expression shift_post_expression
| shift_post_expression greater_than_equal unary_expression shift_post_expression
| shift_post_expression less_than unary_expression shift_post_expression
| shift_post_expression less_than_equal unary_expression shift_post_expression
| shift_post_expression '!=' unary_expression shift_post_expression
| shift_post_expression '==' unary_expression shift_post_expression

shift_post_expression:
| ( multiplicative_operator unary_expression )* ( additive_operator unary_expression ( multiplicative_operator unary_expression )* )*
| shift_left unary_expression
| shift_right unary_expression

template_arg_expression: expression

# Here we have an template-expression after the comma, because we know that the < must be part of a template. Commas cannot appear anywhere else.
# Before the comma, we are unsure. We have a maybe-template-expression.

template_post_ident:
| ( _template_args_start template_arg_expression ( ',' expression )* ',' ? _template_args_end )?

type_specifier:
| ident ( _template_args_start template_arg_expression ( ',' expression )* ',' ? _template_args_end )?

unary_expression:
| primary_expression component_or_swizzle_specifier ?
| '!' unary_expression
| '&' unary_expression
| '*' unary_expression
| '-' unary_expression
| '~' unary_expression
